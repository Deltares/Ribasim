[project]
name = "Ribasim"
version = "2025.4.0"
description = "Water resources modeling"
authors = ["Deltares and contributors <ribasim.info@deltares.nl>"]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-arm64"]
readme = "README.md"
license = "MIT"
license-file = "LICENSE"
homepage = "https://ribasim.org/"
documentation = "https://ribasim.org/"
repository = "https://github.com/Deltares/Ribasim"

[tasks]
# Tests
test-ribasim-python = "pytest --numprocesses=4 -m 'not regression' python/ribasim/tests"
test-ribasim-python-cov = "pytest --numprocesses=4 --cov=ribasim --cov-report=xml -m 'not regression' python/ribasim/tests"
test-ribasim-api = "pytest --basetemp=python/ribasim_api/tests/temp --junitxml=report.xml python/ribasim_api/tests"
# Installation
# Keep Julia version synced with julia.executablePath in .vscode/settings.json
install-julia = "juliaup add 1.11.5 && juliaup override set 1.11.5"
install-pre-commit = "pre-commit install"
# Note that this has a Windows specific override
install-ci = { depends-on = ["install-julia", "update-registry-julia"] }
install = { depends-on = [
    "install-ci",
    "install-qgis-plugins",
    "install-pre-commit",
] }
# Julia
update-registry-julia = { cmd = "julia --check-bounds=yes --eval='using Pkg; Registry.update()'" }
update-manifest-julia = { cmd = "julia --check-bounds=yes --project utils/update-manifest.jl" }
instantiate-julia = { cmd = "julia --project --check-bounds=yes --eval='using Pkg; Pkg.instantiate()'" }
initialize-julia = { depends-on = [
    "update-registry-julia",
    "instantiate-julia",
] }
# Docs
quartodoc-build = { cmd = "quartodoc build && rm objects.json", cwd = "docs", inputs = [
    "docs/_quarto.yml",
    "python/ribasim",
], outputs = [
    "docs/reference/python",
] }
quarto-preview = { cmd = "quarto preview docs", depends-on = [
    "quartodoc-build",
    "generate-testmodels",
] }
quarto-check = { cmd = "quarto check all", depends-on = ["quartodoc-build"] }
quarto-render = { cmd = "julia --project --check-bounds=yes --eval 'using Pkg; Pkg.build(\"IJulia\")' && quarto render docs --to html", depends-on = [
    "quartodoc-build",
    "generate-testmodels",
    "initialize-julia",
] }
docs = { depends-on = ["quarto-preview"] }
# Lint
mypy-ribasim-python = "mypy python/ribasim/ribasim"
mypy-ribasim-testmodels = "mypy python/ribasim_testmodels/ribasim_testmodels"
mypy-ribasim-api = "mypy python/ribasim_api/ribasim_api"
pre-commit-autoupdate = "pre-commit autoupdate"
pre-commit = "pre-commit run --all-files"
lint = { depends-on = [
    "pre-commit",
    "mypy-ribasim-python",
    "mypy-ribasim-testmodels",
    "mypy-ribasim-api",
    "mypy-ribasim-qgis",
] }
# Build
build = { "cmd" = "julia --project --check-bounds=yes build.jl", cwd = "build", depends-on = [
    "generate-testmodels",
    "initialize-julia",
] }
# Tests
s3-download = { cmd = "python utils/s3_download.py {{ remote }} {{ local }}", args = [
    "remote",
    "local",
] }
s3-upload = { cmd = "python utils/s3_upload.py {{ source }} {{ destination }}", args = [
    "source",
    "destination",
] }
test-ribasim-cli = "pytest --numprocesses=4 --basetemp=build/tests/temp --junitxml=report.xml build/tests"
test-ribasim-core = { cmd = "julia --project=core --check-bounds=yes --eval 'using Pkg; Pkg.test(allow_reresolve=false)'", depends-on = [
    "generate-testmodels",
] }
test-ribasim-migration = { cmd = "pytest --numprocesses=4 -m regression python/ribasim/tests", depends-on = [
    { task = "s3-download", args = [
        "hws_migration_test/",
        "hws_migration_test/",
    ] },
] }
test-ribasim-core-cov = { cmd = "julia --project=core --check-bounds=yes --eval 'using Pkg; Pkg.test(allow_reresolve=false, coverage=true)'", depends-on = [
    "generate-testmodels",
] }
test-ribasim-regression = { cmd = "julia --project=core --check-bounds=yes --eval 'using Pkg; Pkg.test(allow_reresolve=false, test_args=[\"regression\"])'", depends-on = [
    "generate-testmodels",
    "test-ribasim-migration",
    { task = "s3-download", args = [
        "benchmark/",
        "benchmark/",
    ] },
] }
generate-testmodels = { cmd = "python utils/generate-testmodels.py", inputs = [
    "python/ribasim",
    "python/ribasim_testmodels",
    "utils/generate-testmodels.py",
], outputs = [
    "generated_testmodels",
] }
tests = { depends-on = ["lint", "test-ribasim-python", "test-ribasim-core"] }
delwaq = { cmd = "pytest python/ribasim/tests/test_delwaq.py" }
gen-delwaq = { cmd = "python python/ribasim/ribasim/delwaq/generate.py" }
model-integration-test = { cmd = "julia --project=core --check-bounds=yes --eval 'using Pkg; Pkg.test(allow_reresolve=false, test_args=[\"integration\"])'", depends-on = [
    { task = "s3-download", args = [
        "hws_2025_4_0/",
        "hws/",
    ] },
] }
# Codegen
codegen = { cmd = "julia --project utils/gen_python.jl && ruff format python/ribasim/ribasim/schemas.py python/ribasim/ribasim/validation.py", depends-on = [
    "initialize-julia",
], inputs = [
    "core",
    "utils",
], outputs = [
    "python/ribasim/ribasim/schemas.py",
    "python/ribasim/ribasim/validation.py",
] }
# Publish
build-ribasim-python-wheel = { cmd = "rm --recursive --force dist && hatch build && twine check dist/*", cwd = "python/ribasim" }
build-ribasim-api-wheel = { cmd = "rm --recursive --force dist && hatch build && twine check dist/*", cwd = "python/ribasim_api" }
build-wheels = { depends-on = [
    "build-ribasim-python-wheel",
    "build-ribasim-api-wheel",
] }
publish-ribasim-python = { cmd = "twine upload dist/*", cwd = "python/ribasim", depends-on = [
    "build-ribasim-python-wheel",
] }
publish-ribasim-api = { cmd = "twine upload dist/*", cwd = "python/ribasim_api", depends-on = [
    "build-ribasim-api-wheel",
] }
# QGIS
qgis = "qgis --profiles-path .pixi/qgis_env"
install-ribasim-qgis = "python ribasim_qgis/scripts/install_ribasim_qgis.py"
install-imod-qgis = "python ribasim_qgis/scripts/install_qgis_plugin.py iMOD && python ribasim_qgis/scripts/enable_plugin.py imodqgis"
install-plugin-reloader-qgis = "python ribasim_qgis/scripts/install_qgis_plugin.py \"Plugin Reloader\" && python ribasim_qgis/scripts/enable_plugin.py plugin_reloader"
install-debugvs-qgis = "python ribasim_qgis/scripts/install_qgis_plugin.py debugvs==0.7 && python ribasim_qgis/scripts/enable_plugin.py debug_vs"
test-ribasim-qgis-docker = { cmd = "sh ./test.sh", cwd = ".docker" }
install-qgis-plugins = { depends-on = [
    "install-plugin-reloader-qgis",
    "install-ribasim-qgis",
    "install-imod-qgis",
    "install-debugvs-qgis",
] }
test-ribasim-qgis-ui = { cmd = "python ribasim_qgis/scripts/run_qgis_ui_tests.py", depends-on = [
    "install-ribasim-qgis",
] }
test-ribasim-qgis = { cmd = "pytest --numprocesses=auto ribasim_qgis/tests/core", depends-on = [
    "install-ribasim-qgis",
] }
test-ribasim-qgis-cov = { cmd = "pytest --numprocesses=auto --cov=ribasim_qgis --cov-report=xml --cov-config=ribasim_qgis/.coveragerc ribasim_qgis/tests/core", depends-on = [
    "install-ribasim-qgis",
] }
mypy-ribasim-qgis = "mypy ribasim_qgis"
# Run
ribasim-core = { cmd = "julia --project=core --check-bounds=yes -e 'using Ribasim; Ribasim.main(ARGS)'", depends-on = [
    "initialize-julia",
] }
ribasim-core-testmodels = { cmd = "julia --project --check-bounds=yes --threads=4 utils/testmodelrun.jl", depends-on = [
    "generate-testmodels",
    "initialize-julia",
] }
migrate-model = { cmd = "python utils/migrate_model.py {{ input_toml }} {{ output_toml }}", args = [
    "input_toml",
    "output_toml",
] }
# Release
github-release = "python utils/github-release.py"

[tasks.generate-sbom-ribasim-core]
cmd = "julia --project --check-bounds=yes -- utils/generate-sbom.jl"
depends-on = ["initialize-julia"]
inputs = ["core/Project.toml"]
outputs = ["Ribasim.spdx.json"]

[tasks.generate-sbom-ribasim-python-noarch]
args = [{ "arg" = "path_sep" }]
cmd = "sbom4python -m ribasim --system --sbom spdx --format json --output Ribasim-python.spdx.json"
env = { "PATH" = "$PATH$path_sep$CONDA_PREFIX/Lib/site-packages/magic/libmagic" }
inputs = ["python/ribasim/pyproject.toml"]
outputs = ["Ribasim-python.spdx.json"]

[target.win.tasks]
add-ribasim-icon = { cmd = "rcedit build/ribasim/ribasim.exe --set-icon docs/assets/ribasim.ico" }
install-ci = { depends-on = ["install-julia", "update-registry-julia"] }

[[target.win.tasks.generate-sbom-ribasim-python.depends-on]]
task = "generate-sbom-ribasim-python-noarch"
args = [";"]

[[target.linux.tasks.generate-sbom-ribasim-python.depends-on]]
task = "generate-sbom-ribasim-python-noarch"
args = [":"]

[[target.osx.tasks.generate-sbom-ribasim-python.depends-on]]
task = "generate-sbom-ribasim-python-noarch"
args = [":"]

[target.win.activation]
# Workaround a conflict between conda openssl activation and julia < 1.12
scripts = ["utils/unset-ssl-cert.bat"]

[activation.env]
JULIA_CONDAPKG_BACKEND = "Null"

[dependencies]
datacompy = ">=0.16"
geopandas = "1.0.*"
gh = "*"
hatch = "*"
hatchling = "*"
jinja2 = "*"
juliaup = "*"
jupyter = "*"
matplotlib = ">=3.7"
minio = "*"
mypy = "*"
netcdf4 = "*"
networkx = ">=3.3"
numpy = ">=1.25, <2.2"
pandas = ">=2.0"
pandas-stubs = "*"
pandera = ">=0.20, <0.23"
plotly = "*"
pre-commit = "*"
pyarrow = ">=17.0"
pydantic = ">=2.0"
pydantic-settings = "*"
pyogrio = ">=0.8"
pyqt-stubs = "*"
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
python = ">=3.11"
qgis = ">=3.34"
qgis-plugin-manager = "*"
quarto = "*"
quartodoc = "*"
ruff = "*"
rust = "*"
shapely = ">=2.0"
teamcity-messages = "*"
tomli = ">=2.0"
tomli-w = ">=1.0"
twine = "*"
xarray = "*"
xmipy = ">=1.3"
xugrid = "*"

[pypi-dependencies]
ptvsd = "*"
ribasim = { path = "python/ribasim", editable = true }
ribasim_api = { path = "python/ribasim_api", editable = true }
ribasim_testmodels = { path = "python/ribasim_testmodels", editable = true }
sbom4python = ">=0.12.3"
python-magic = ">=0.4.27"

[feature.py312.dependencies]
python = "3.12.*"

[feature.py311.dependencies]
python = "3.11.*"

[target.win-64.dependencies]
rcedit = "*"

[environments]
default = ["py312"]
py311 = ["py311"]

[system-requirements]
linux = "3.10.0"
