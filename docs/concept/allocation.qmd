---
title: "Allocation"
---

# Introduction
In water resources management, allocation deals with distributing limited water resources among competing demands in a fair and efficient manner. This is particularly important in situations where water demands exceed available supply, requiring a systematic approach to prioritize and optimize water distribution across the entire network. In Ribasim we formulate this with linear programming using [JuMP](https://jump.dev/JuMP.jl/stable/) and solve the problem using the [HiGHS solver](https://highs.dev/).

## Allocation Networks
Allocation is the process of assigning an optimized allocated flow rate to demand nodes in the physical layer of the model based on information about sources and their source priorities, the different demand nodes over various demand priorities, constraints introduced by nodes, local water availability and graph topology. It solves a linearized version of the problem formulated for the [physical layer](/concept/modelconcept.qmd#physical-layer) for a period of time ahead of the physical layer, while simultaneously optimizing allocated flows and steering certain structures to get the water from (preferred) source to demand. The physics is implemented in an implicit manner, rather like the [implicit Euler](https://en.wikipedia.org/wiki/Backward_Euler_method) numerical method.

The allocation problem is solved per subnetwork of the Ribasim model. A subnetwork is defined by all nodes that have the same subnetwork ID in the [Node table](/reference/usage.qmd#node). Each subnetwork is used to formulate a linear optimization problem with the [JuMP](https://jump.dev/JuMP.jl/stable/) package, which is solved using the [HiGHS solver](https://highs.dev/). For more in-depth information see also the example of solving the maximum flow problem with `JuMP.jl` [here](https://jump.dev/JuMP.jl/stable/tutorials/linear/network_flows/#The-max-flow-problem).

When we build a Ribasim model in which we want to utilize allocation, it can be computationally efficient and stable to divide a large allocation network into a primary network which connects to multiple subnetworks. The primary network should be the main water system and treats each connected subnetwork as a single demand node.

We can then first solve an allocation optimization for the primary network, that calculates how to optimally divide the available water to each subnetwork. With this allocated amount for a subnetwork, we can optimize how to divide this water within the subnetwork to the demand nodes.

Subnetworks are defined by grouping nodes that share the same subnetwork ID in the [Node table](../reference/usage.qmd#node). The primary network needs to be assigned with subnetwork ID 1. This will always represent the main water system.


Secondary networks:

- Can only connect to the primary network via Pump or Outlet nodes
- Cannot connect directly to other secondary networks
- The demand of a subnetwork to the primary network is the sum of all unmet demands within the subnetwork

For each subnetwork, a linear optimization problem is formulated using [MOA.jl](https://github.com/jump-dev/MOA.jl) for multi-objective optimization.

## Mathematical formulation

In Ribasim, we optimize and assign allocated flow rates to demand nodes based on:

- Information about sources and their priorities
- Different demand nodes and their priorities
- Constraints from nodes, local water availability and network topology

The optimization problem aims to minimize the difference between requested demands and supplied amounts, subject to water balance constraints:

$$
\begin{aligned}
\text{minimize}\quad & z = \sum_{i=1}^{N_d} E_i(F, S) \\
\text{subject to}\quad & \frac{dS_j}{dt} = \sum_{k \in L_j} F_k\\
\end{aligned}
$$

where:

- $z$ is the total error (objective function value)
- $N_d$ is the number of demands within a priority level
- $E_i(F, S)$ is the deviation error for demand $i$ as a function of flows $F$ and storages $S$
- $S_j$ is the storage of basin $j$ [m³]
- $F_k$ is the volumetric flow rate on link $k$ [m³/s], positive for inflow, negative for outflow
- $L_j$ is the set of flow links connected to basin $j$
- $t$ is the time [s]


## Discretization

In the optimization problem, the water balance must be discretized over the allocation timestep.

$$\Delta t = t^{n+1} - t^{n}$$

Where the superscript $^n$ denotes evaluation at the beginning of the timestep and $^{n+1}$ at the end. We then use a backward Euler approximation:

$$\frac{dS_j}{dt} \approx \frac{S_j^{n+1} - S_j^{n}}{\Delta t} = \sum_{k \in L_j} F_k^{n+1} $$

Under the assumption that

- flows are constant over $\Delta t$
- coefficients in linearized equations are evaluated at the beginning of the timestep
- The allocation timestep $\Delta t$ is short enough that linearization remains valid

## Linearization

To use efficient linear programming algorithms, nonlinear relationships can be linearized around the current time $t^n$. For example, a nonlinear relationship between flow $F$, an upstream level ($h_1$) and a downstream level ($h_2$), can be linearized as:

$$F(h_1,h_2) \approx F(h_1^n,h_2^n) + \frac{\partial F}{\partial h_1}\bigg|_{h_1^n,h_2^n}(h_1^{n+1}-h_1^n) + \frac{\partial F}{\partial h_2}\bigg|_{h_1^n,h_2^n}(h_2^{n+1}-h_2^n)$$


This yields a linear programming problem that can be solved efficiently while maintaining acceptable accuracy for small changes around the operating point.

## The high level algorithm {#sec-high-level-algorithm}
The allocation algorithm contains 2 types of optimization:

- Demand collection, where water is allocated in the secondary networks with the sole purpose of finding out what the demand of the secondary network is from the primary network;
- Allocation, where water is allocated in all subnetworks, and the amount of water that is allocated to demands is written as output and communicated to the physical layer.

The full algorithm goes through the following steps:

1. Perform demand collection in the secondary subnetworks;
2. Perform allocation in the primary network;
3. Perform sequentially allocation (in the future maybe in parallel) in the subnetworks.

If no primary network is present, then step 1 and 2 are skipped and the entire network is treated as a single subnetwork.



# Implementation
## The basin profile
The level in a basin is generally a non-linear function of the storage (except when the area is constant). To incorporate this into a linear programming framework, we linearize the basin profile at the current timestep.

$$h^{n+1} \approx h^n + \frac{dh}{dS}(S^n)(S^{n+1} - S^n)$$

with

$$\frac{dh}{dS}(S^n) = \frac{1}{A^n}$$

and $A^n$ is the area evaluated at the beginning of the time step

$$h^{n+1} \approx h^{n} + \frac{1}{A^n}(S^{n+1} - S^n)$$


## Connector nodes

In Ribasim, connector nodes can determine the flow as function of upstream and/or downstream level. These are [LinearResistance](../reference/node/linear-resistance.qmd), [ManningResistance](../reference/node/manning-resistance.qmd) and [TabulatedRatingCurve](../reference/node/tabulated-rating-curve.qmd) nodes. Hence if we apply multi variable linearisation:

$$ F^{n+1} = F^{n} + \frac{\partial F}{\partial h_1}(h_1^n,h_2^n)(h_1^{n+1} - h_1^{n}) + \frac{\partial F}{\partial h_2}(h_1^n,h_2^n)(h_2^{n+1} - h_2^{n}) $$

However, we need to relate the level to a storage (in case of a basin). So we can substitute the linearised basin profile. For example if a non linear flow node connects downstream to a basin and upstream to a level boundary:


$$ F_m^{n+1} = F_m^{n} + \frac{1}{A^n}\frac{\partial F_m}{\partial h_1}(h_1^n, h_2^n) (S_1^{n+1} - S_1^n) + \frac{\partial F}{\partial h_2}(h_1^n,h_2^n)(h_2^{n+1} - h_2^{n}) $$


## Basin forcings

Basin forcings represent vertical fluxes (precipitation, evaporation, drainage, infiltration) that affect basin water balance over the allocation timestep. These are computed as time-averaged values from the physical layer and incorporated into the allocation optimization as fixed parameters.

## Boundary nodes

We have the following boundary nodes in Ribasim:

- The Terminal, where water simply leaves the model
- The LevelBoundary, which yields fixed water levels; $h^{n+1}_{lb}$ is read from the interpolated timeseries $h_{lb}$ of the node or is a constant value
- The FlowBoundary, which specifies a flow rate. Here the average outflow of the FlowBoundary in the physical layer over the previous $\Delta t$ is used as a prediction of the flow rate in the next $\Delta t$ over which the optimization takes place.

:::{.callout-note}
The flow rate of a FlowBoundary is given as a timeseries so we could use the interpolation of that timeseries to compute the average flow in the coming $\Delta t_\text{allocation}$. However, that would not always be accurate, since FlowBoundary nodes can be deactivated by Discrete Control which can not (easily) be anticipated.
:::



# Objectives (goals)

The allocation algorithm uses [MOA.jl](https://github.com/jump-dev/MOA.jl) to optimize for a sequence of objectives through lexicographic goal programming. This approach optimizes objectives sequentially by priority level, where higher priority objectives are satisfied before lower priority ones. The implementation uses linear objective functions for computational efficiency.

### Demand objectives

There are several types of demand nodes:

- UserDemand ($UD \subset S$), which can have inflow demands for various demand priorities, and can consume a fraction of its abstraction and releases the rest back to the model;
- LevelDemand ($LD \subset S$), which can have several level demands for various demand priorities, where higher levels must have lower priorities
- FlowDemand ($FD \subset S$), which can have several inflow demands for various demand priorities, where no flow is consumed. The FlowDemand node gives this demand to another node

Demand objectives come in 2 categories:

- **Flow demand** (UserDemand, FlowDemand): Optimize for flow rates to meet consumption or throughflow requirements
- **Level demand** (LevelDemand): Optimize for storage levels in basins

We separate these out because these different types optimize for different quantities (flow and storage respectively), and combining demands of these two types within the same subnetwork within the same demand priority is not allowed.

For each demand priority $d$, the objective function minimizes the sum of linear error variables:

$$\text{minimize} \quad \sum_{i \in \mathcal{D}} \left(e_i^- + e_i^+\right)$$

where:
- $\mathcal{D}$ is the set of all demand nodes in the current priority level
- $e_i^-$ and $e_i^+$ are non-negative error variables representing under-allocation and over-allocation deviations from target demand $d_i$ for node $i$
- These error variables are subject to linear constraints that relate them to the actual allocated flows and target demands

## Control

### Control by allocation

When Pumps and Outlets are part of a subnetwork, they can be controlled by allocation. To accomplish this, they must be given the special control state `Ribasim.allocation`. When a Pump or Outlet has this control state, the flow through the node is only bounded by its capacity and node-specific constraints based on the difference between upstream and downstream levels. After all goals have been optimized for, the flow rate through the Pump or Outlet is communicated to the physical layer.

### Interaction of allocation with other control systems

There are several other control systems in Ribasim:

- [DiscreteControl](/reference/node/discrete-control.qmd): This node type can change parameters of other nodes in between time steps of the solver of the physical layer. If the affected node is within a subnetwork, the parameter change will also be taken into account in the next allocation run. The parameters in the allocation layer are always up to date with those in the physical layer, but the allocation algorithm cannot anticipate parameter changes from DiscreteControl that occur within the allocation time step which is being optimized over, so this can be a source of discrepancies between the physical layer and the allocation layer.
- [ContinuousControl](/reference/node/continuous-control.qmd): Some ContinuousControl relationships could potentially be implemented in allocation, but this requires further validation and is not currently supported.
- [PidControl](/reference/node/pid-control.qmd): The continuous nature of this control type is not taken into account. The flow rate the controlled structure has at the start of the allocation optimization step will be extrapolated in a constant manner.


See [here](/reference/usage.qmd#results) for information about allocation output.

## Schematisation input

### The subnetwork

The allocation problem is solved per subnetwork, which is given by a subset $S \subset V$ of node IDs. Different subnetworks are disjoint from each other. Nodes can also not be part of any subnetwork.

### Source flows

Sources are indicated by a set of links in the subnetwork:
$$
E_S^\text{source} \subset E
$$
which are automatically inferred as all links that point out of LevelBoundary or FlowBoundary nodes. That is, if $(i,j) \in E_S^\text{source}$, then the time-averaged flow over the last allocation interval $\Delta t_{\text{alloc}}$:
$$
    \bar{F}_{ij} = \frac{1}{\Delta t_{\text{alloc}}}\int_{t - \Delta t_{\text{alloc}}}^t F_{ij}(t') \, dt'
$$
is treated as a source flow in the allocation problem. These links are either coming from a boundary/source node (e.g. a level or flow boundary) or connect the primary network to a subnetwork. For the definition of $F_{ij}$ see [the formal model description](/concept/equations.qmd#formal-model-description).

### User demands

The subnetwork contains a subset of UserDemand nodes $U_S \subset S$, each with static or time-varying demands over various priorities $p$:
$$
    d^p_i(t), \quad \forall i \in U_S, \; p \in \{1, 2, \ldots, p_{\max}\}
$$

:::{.callout-note}
On this page we assume that the priorities are given by all integers from $1$ to some $p_{\max} \in \mathbb{N}$. For the Ribasim input this is not a requirement; some of these in between priority values can be missing, only the ordering of the given priorities is taken into account.
:::

### Flow demands

The subnetwork contains a subset of FlowDemand nodes $FD_S \subset S$ which have a demand at a single priority $p_{\text{fd}}$ for the flow through that node. The demand is defined as:
$$
    d^p_i(t) =
    \begin{cases}
        0 & \text{if } p \neq p_{\text{fd}} \\
        d^{p_{\text{fd}}}_i(t) & \text{if } p = p_{\text{fd}}
    \end{cases}
$$
for all $i \in FD_S$. Here $d^{p_{\text{fd}}}_i(t)$ is the original flow demand minus any flows allocated to node $i$ at higher priorities $p < p_{\text{fd}}$.

## Simulation (physical layer) input


### Constraining factors

#### Flow magnitude and direction constraints
Nodes in the Ribasim model that have a `max_flow_rate`, i.e. Pump, Outlet and LinearResistance, put a constraint on the flow through that node. Some nodes only allow flow in one direction, like Pump, Outlet and TabulatedRatingCurve.

#### UserDemand return flows
UserDemand nodes dictate proportional relationships between flows over links in the subnetwork. The return factor is given by $0 \leq r_i(t) \leq 1, \forall i \in U_S$.


### Capacities

Each link in the subnetwork has an associated capacity. These capacities are collected in the sparse capacity matrix $C_S \in \overline{\mathbb{R}}_{\ge 0}^{n\times n}$ where $n$ is the number of nodes in the extended subnetwork and $\overline{\mathbb{R}}_{\ge 0} = \mathbb{R}_{\ge 0} \cup \{\infty\}$. A link capacity is infinite if there is nothing in the model constraining the capacity.

The capacities are determined in different ways:

- If a link does not exist in the allocation network, i.e. $(i,j) \notin E_S$ for certain $1 \leq i,j \leq n'$, then $(C_S)_{i,j} = 0$;
- The capacity of the link $e \in E_S$ is given by the smallest `max_flow_rate` of the nodes along the equivalent links in the subnetwork. If there are no nodes with a `max_flow_rate`, the link capacity is infinite. If the `max_flow_rate` is time-dependent, only the value at the starttime of the simulation is considered;
- If the link is a source, the capacity of the link is given by the flow rate of that source;

There are also capacities for special links:

- $C^{LD}_S \in \mathbb{R}^b_{\geq 0}$ where $b = \# B_S$ is the number of basins, for the flow supplied by basins based on level demand (this capacity is 0 for basins that have no level demand).
- $C^{FD}_S \in \mathbb{R}^c_{\geq 0}$ where $c = \# FD_S$ is the number of nodes with a flow demand, for the flow supplied by flow buffers at these nodes with a flow demand.
- $C^{UD}_S \in \mathbb{R}^f_{\geq 0}$ where $f = \# U_S$, for the flow supplied by the user demand outflow source whose capacity is given by return flows.
