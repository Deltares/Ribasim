---
title: "Allocation"
---

# Introduction
In water resources management, allocation deals with distributing limited water resources among competing demands in a fair and efficient manner. This is particularly important in situations where water demands exceed available supply, requiring a systematic approach to prioritize and optimize water distribution across the network.



In Ribasim, we optimize and assign the allocated flow rate to demand nodes in the physical layer of the model based on:

- information about sources and their source priorities
- the different demand nodes over various demand priorities
- constraints introduced by nodes, local water availability and graph topology.

Ribasim's allocation algorithm works by optimizing for a given demand in each time step. Optimal is defined by minimizing the difference between the requested demand and the supplied amount.


Hence we want to minimize the difference between the demanded amount and allocated amount, subject to the constraint of the mass continuity, assuming incompessibility.
$$
\begin{aligned}
\text{min}\quad & \sum_{i=0}^n Q_{demand,i} - Q_{alloc,i} + \sum_{i=1}^n S_{demand,i} - S_{alloc,i}\\
\text{s.t.}\quad & \frac{dS}{dt} = Q_{in} - Q_{out}\\
\end{aligned}
$$


where:

- $Q$ denotes flow rate [m³/s]
- $S$ is the storage [m³]
- $t$ is the time [s]
- $n$ is the number of demand nodes [-]

## Discretizing the optimization problem

For numerical solution, we discretize the continuous optimization problem over the allocation timestep $\Delta t$:

- Flows are assumed constant over $\Delta t$
- States (storage, levels) are evaluated at start and end of timestep
- Coefficients in linearized equations are evaluated at start conditions

For the time discretization, we use a backward Euler approximation to transform them from continuous to discrete equations:

$$\frac{dS}{dt} \approx \frac{S^{n+1} - S^{n}}{\Delta t} = Q_{in}^{n+1} - Q_{out}^{n+1} $$

Where $n$ denotes evaluation at the beginning of the time step and $n+1$ denotes evaluation at the end of the time step.

This yields a linear programming problem that can be solved efficiently. The allocation timestep $\Delta t$ must be chosen carefully to:

1. Be short enough that the linearization remains valid
2. Be long enough to allow meaningful allocation decisions
3. Be compatible with the physical timestep

## Linearizing for the optimization problem

The nonlinear relationships must be linearized to allow using linear programming algorithms, which offer better computational performance. We linearize around the current time step $t^n$ by:

1. Taking first-order Taylor expansions of nonlinear functions with respect to storage
2. Evaluating coefficients based on current state
3. Treating resulting linear relationships as constraints

For example, nonlinear flow-head relationships in the physical layer like Manning's equation are linearized to:

$$Q = K_1^nS_1^{n+1} - K_1^nS_2^{n+1} $$

This yields a linear approximation valid for small changes around the operating point.

where S is storage, and Q represents flows in and out of nodes. These flows themselves depend on various physical factors like:

- Water levels and hydraulic heads
- Hydraulic resistances
- Pump and structure capacities
- Network connectivity constraints


The allocation problem is solved per subnetwork of the Ribasim model. A subnetwork is defined by all nodes that have the same subnetwork ID in the [Node table](../reference/usage.qmd#node). Each subnetwork is used to formulate a linear optimization problem with the [JuMP](https://jump.dev/JuMP.jl/stable/) package, which is solved using the [HiGHS solver](https://highs.dev/). For more in-depth information see also the example of solving the maximum flow problem with `JuMP.jl` [here](https://jump.dev/JuMP.jl/stable/tutorials/linear/network_flows/#The-max-flow-problem).

There can be a special subnetwork called primary network (with subnetwork ID 1), which represents the main or primary water system. Other subnetworks are called secondary networks and are only allowed to connect to the primary network via a Pump or Outlet; secondary networks are not allowed to be connected to each other. Secondary networks automatically formulate demands to the primary network if there is a shortage of water within the subnetwork to fulfill all demands.

<span style="color: red;">#TODO: Add model image with primary network and secondary networks.</span>

# The high level algorithm {#sec-high-level-algorithm}
The allocation algorithm contains 2 types of optimization:

- Demand collection, where water is allocated in the secondary networks with the sole purpose of finding out what the demand of the secondary network is from the primary network;
- Allocation, where water is allocated in all subnetworks, and the amount of water that is allocated to demands is written as output and communicated to the physical layer.

The full algorithm goes through the following steps:

1. Perform demand collection in the secondary subnetworks;
2. Perform allocation in the primary network;
3. Perform allocation for the other subnetworks.

If no primary network is present, then step 1 and 2 are skipped.

# The optimization problems for the subnetworks

## Water balance

Just as the physical layer, the allocation layer must satisfy the water balance, in this case over the allocation timestep $\Delta t_\text{allocation}$. To explain how this is done, we give an algebraic description of some basic aspects of the subnetworks. Say we denote the set of all nodes in the model by $V$, and the subset that forms a subnetwork by $S \subseteq V$. We also have the the set of all flow links in the model $L \subseteq V \times V$, i.e. the links are ordered pairs of nodes. The set of links associated with the subnetwork is derived from $S$ as

$$
    E_S = \{l \in L \; : \; l \cap S \ne\emptyset\},
$$

<span style="color: red;">#TODO: Add image with which links are assumed to be part of the subnetwork.</span>

i.e. all links in the model that have at least one node in the subnetwork. For each link in the subnetwork we define a flow variable ($\text{m}^3/\text{s}$):

$$
    -F_\max \le \mathcal{F}_l \le F_\max, \quad l \in E_S.
$$

Here each $\mathcal{F}_l$ denotes the flow over the link $l$ over the timestep. These are decision variables, i.e. values that are an output of the optimization, which we denote in cursive script. The variable can attain values between the bounds $-F_\max$ and $F_\max$, where $F_\max = 500.000 \;\text{m}^3/\text{s}$. The bound $F_\max$ is chosen as a reasonable maximum value that flows can attain. We assume these flows to be constant over the period $\Delta t_\text{allocation}$. We will see later that certain parameters of the model can put stricter bounds on these flows.

For the basins $B_S \subset S$ in the subnetwork we define storage parameters ($\text{m}^3$) for the start of the allocation time step $\Delta t_\text{allocation}$:

$$
    S^\text{start}_b, \quad b \in B_S.
$$

These are set to the values that hey have in the physical layer at the start of the allocation timestep. The storages at the end of this timestep are decision variables:

$$
    0 \le \mathcal{S}^\text{end}_b \le S_b^\max, b \in B_S,
$$

<span style="color: red;">#TODO: We might decide to relax this upper bound a bit.</span>

where $S_b^\max$ is the largest storage within the [Basin profile](../reference/node/basin.qmd#profile). Lastly we have a horizontal forcing variable for each basin

$$
    \mathcal{H}^\text{end}, \quad b \in B_S,
$$

whose value will be discussed later. Given these variables, we can set up a water balance constraint for each basin in the subnetwork:

$$
    \mathcal{S}_b^\text{end} - S_b^\text{start} = \Delta t_\text{allocation}
    \left(
        \mathcal{H}_b
        +
        \sum_{(n, b) \in E_S} \mathcal{F}_{(n,b)}
        -
        \sum_{(b, n) \in E_S} \mathcal{F}_{(b,n)}
    \right),
    \quad
    b \in B_S.
$$

## The Basin profile

For most of the physical layer, flows depend on levels. Therefore level variables have to be introduced:

$$
    L_b^\min \ge \mathcal{L}^\text{end}_b \ge L_b^\max, \quad b \in B_S,
$$

<span style="color: red;">#TODO: We might decide to relax this upper bound a bit, in accordance with the relaxation of the upper bound of the storage.</span>

where $L_b^\min$ is the bottom level of the Basin and $L_b^\max$ is the highest level available in the Basin profile. Note that this means that the problem becomes infeasible if the level in a basin exceeds this value, and the solver will attempt to avoid this from happening. The level in a basin depends on the storage via the [Basin profile](../reference/node/basin.qmd#profile), here denoted by the function $P_b$:

$$
    \mathcal{L}^\text{end}_b = P_b(\mathcal{S}^\text{end}_b)
$$

<span style="color: red;">#TODO: Explain how the level(storage) relationship is linearized, and how some 'phantom storage' is introduced into the profile.</span>

Just like the initial storages, each Basin has an initial level $L_b^\text{start}$ known from the physical layer which we need to compute flows.

## Physical processes

### Basin forcings

### Boundary nodes

We have the following boundary nodes in Ribasim:

- The Terminal, where water can leave the model;
- The LevelBoundary, which yields fixed water levels; $L^\text{end}_\text{fb} = h_{fb}(t + \Delta t_\text{allocation})$ given the interpolated timeseries $h_{fb}$ of the node (or constant value);
- The FlowBoundary, which specifies a flow rate. Here the average outflow of the FlowBoundary in the physical layer over the previous $\Delta t_\text{allocation}$ is used as a prediction of the flow rate in the next $\Delta t_\text{allocation}$ over which the optimization takes place.

:::{.callout-note}
The flow rate of a FlowBoundary is given as a timeseries so we could use the interpolation of that timeseries to compute the average flow in the coming $\Delta t_\text{allocation}$. However, that would not always be accurate, since FlowBoundary nodes can be deactivated by Discrete Control which can not (easily) be anticipated.
:::

### Tabulated Rating Curve

Since the $Q(h)$ relationships for TabulatedRatingCurve nodes (see [here](../reference/node/tabulated-rating-curve.qmd#equations)) are already linear, these can be directly incorporated into the allocation problem.

### Resistance nodes

In Ribasim we have [LinearResistance](../reference/node/linear-resistance.qmd) and [ManningResistance](../reference/node/manning-resistance.qmd) nodes. The linear resistance node is already linear and therefore can be directly incorporated in the allocation problem. For ManningResistance we linearize the flow relationship with respect to the upstream and downstream level at the beginning of the allocation timestep.

For the resistance nodes [the phantom storage introduced above](#the-basin-profile) is very helpful, because it prevents that according to the formula water has to flow from an empty basin with a high bottom to a lower basin.

## Objectives (goals)

The allocation algorithm optimizes for a sequence of objectives in succession, adding constraints after optimization for each goal to retain the result of that optimization in the subsequent optimizations. This approach is known as [goal programming](https://en.wikipedia.org/wiki/Goal_programming).

<span style="color: red;">At the time of writing it is not completely clear yet which parts of the physics will be added as hard constraints and which ones will be optimized for (and how).</span>

### Demand objectives

There are several types of demand nodes:

- UserDemand ($UD \subset S$), which can have inflow demands for various demand priorities, and can consume a fraction of its abstraction and releases the rest back to the model;
- LevelDemand ($LD \subset S$), which can have several level demands for various demand priorities, where higher levels must have lower priorities
- FlowDemand ($FD \subset S$), which can have several inflow demands for various demand priorities, where no flow is consumed. The FlowDemand node gives this demand to another node

Demand objectives come in 2 categories:

- flow demand (UserDemand, FlowDemand)
- Level demand (LevelDemand)

We separate these out because these different types optimize for different quantities (flow and storage respectively), and combining demands of these two types within the same subnetwork within the same demand priority is not allowed. Given a demand priority $d$, the objective function looks like

<span style="color: red;">#TODO: Write out objective functions.</span>

## Control

### Control by allocation

When Pumps and Outlets are part of a subnetwork, they can be controlled by allocation. To accomplish this, they must be given the special control state `Ribasim.allocation`. When a Pump or Outlet has this control state, the flow trough the node is only bounded by its capacity and <span style="color: red;">#TODO: Pump or Node specific constraints based on the difference between upstream and downstream level.</span>. After all goals have been optimized for, the flow rate trough the Pump or Outlet is communicated to the physical layer.

### Interaction of allocation with other control systems

There are several other control systems in Ribasim:

- [DiscreteControl](../reference/node/discrete-control.qmd): This node type can change parameters of other nodes in between time steps of the solver of the physical layer. If the affected node is within a subnetwork, the parameter change will also be taken into account in the next allocation run  <span style="color: red;">#TODO: This has not been implemented yet.</span>. So the parameters in the allocation layer are always up to date with those in the physical layer, but the allocation algorithm cannot anticipate parameter changes from DiscreteControl that occur within the allocation time step which is being optimized over, so this can be a source of discrepancies between the physical layer and the allocation layer.
- [ContinuousControl](../reference/node/continuous-control.qmd): <span style="color: red;">#TODO: Undecided. Some ContinuousControl relationships could be implemented in allocation, but this requires validation.</span>
- [PidControl](../reference/node/pid-control.qmd): The continuous nature of this control type is not taken into account. The flow rate the controlled structure has at the start of the allocation optimization step will be extrapolated in a constant manner.

# Output

See [here](../reference/usage.qmd#results).


The following data of the parameters and state of a Ribasim model are relevant for the allocation problem.

## Schematisation input

### The subnetwork

The allocation problem is solved per subnetwork, which is given by a subset $S \subset V$ of node IDs. Different subnetworks are disjoint from each other. Nodes can also not be part of any subnetwork.

### Source flows

Sources are indicated by a set of links in the subnetwork
$$
E_S^\text{source} \subset E,
$$
which are automatically inferred as all links that point out of LevelBoundary or FlowBoundary nodes. That is, if $(i,j) \in E_S^\text{source}$, then the average over the last allocation interval $\Delta t_{\text{alloc}}$ of the of the flow over this link
$$
    \frac{1}{\Delta t_{\text{alloc}}}\int_{t - \Delta t_{\text{alloc}}}^tQ_{ij}(t') dt'
$$
 is treated as a source flow in the allocation problem. These links are either coming from a boundary/source node (e.g. a level or flow boundary) or connect the primary network to a subnetwork. For the definition of $Q_{ij}$ see [the formal model description](/concept/equations.qmd#formal-model-description).

### User demands

The subnetwork contains a subset of UserDemand nodes $U_S \subset S$, who all have static or time varying demands over various priorities $p$:
$$
    d^p_i(t), \quad i \in U_S, p = 1,2,\ldots, p_{\max}.
$$

:::{.callout-note}
On this page we assume that the priorities are given by all integers from $1$ to some $p_{\max} \in \mathbb{N}$. For the Ribasim input this is not a requirement; some of these in between priority values can be missing, only the ordering of the given priorities is taken into account.
:::

### Flow demands

The subnetwork contains a subset of nodes $FD_S \subset S$ which have a demand of a single priority $p_{\text{fd}}$ for the flow through that node. With this we define
$$
    d^p_i(t) =
    \begin{cases}
        0 \text{ if } p \ne p_{\text{fd}} \\
        d^{p_{\text{df}}} \text{ if } p = p_{\text{fd}}
    \end{cases}
$$
for all $i \in FD_S$. Here $d^{p_{\text{df}}}$ is given by the original flow demand minus the flows trough node $i$ at all priorities $p < p_{\text{fd}}$.

## Simulation (physical layer) input

### Vertical fluxes and local storage

Apart from the source flows denoted by links, there are other sources of water in the subnetwork, associated with the Basins in the subnetwork $B_S = B \cap S$. First, there is the average over the last allocation interval $\Delta t_{\text{alloc}}$ of the vertical fluxes (precipitation, evaporation, infiltration and drainage) for each Basin:
$$
    \phi_i(t) = \frac{1}{\Delta t_{\text{alloc}}}\int_{t - \Delta t_{\text{alloc}}}^t \left[Q_{P,i}(t') - Q_{E,i}(t') + Q_{\text{drn},i}(t') - Q_{\text{inf},i}(t') \right] dt', \quad \forall i \in B_S.
$$

We consider fluxes into the basin to be positive and out of the basin to be negative. For more information see [the natural water balance terms](/concept/equations.qmd#natural-water-balance-terms).

Secondly, there is either a supply or demand from the storage in the Basin if the Basin has a level demand. Given a minimum level $\ell_{\min, i}$ and a maximum level $\ell_{\max, i}$ which correspond to a minimum storage $s_{\min, i}$ and maximum storage $s_{\max, i}$ respectively, we get a flow supply of
$$
    F^{\text{basin out}}_{\max, i} = \max\left(0.0, \frac{u_i(t)-s_{\min,i}}{\Delta t_{\text{alloc}}} + \phi_i(t)\right)
$$

and a demand of
$$
    d^p_i = \max\left(0.0, \frac{s_{\max,i} - u_i(t)}{\Delta t_{\text{alloc}}} - \phi_i(t)\right),
$$

for all $i \in B_S$. Note that the basin demand has only a single priority, so for other priorities this demand is $0$.

### Constraining factors

#### Flow magnitude and direction constraints
Nodes in the Ribasim model that have a `max_flow_rate`, i.e. Pump, Outlet and LinearResistance, put a constraint on the flow through that node. Some nodes only allow flow in one direction, like Pump, Outlet and TabulatedRatingCurve.

#### UserDemand return flows
UserDemand nodes dictate proportional relationships between flows over links in the subnetwork. The return factor is given by $0 \le r_i(t) \le 1, i \in U_S$.

## The subnetwork
The subnetwork consists of a set of nodes $S \subset V$ and links

$$
    E_S = (S \times S) \cup E_S^\text{source},
$$

i.e. the links that lie within the subnetwork together with the source links (which can be partially outside the subnetwork).
The nodes in $S$ together with the connected nodes outside the subnetwork are called the extended subnetwork.

### Capacities

Each link in the subnetwork has an associated capacity. These capacities are collected in the sparse capacity matrix $C_S \in \overline{\mathbb{R}}_{\ge 0}^{n\times n}$ where $n$ is the number of nodes in the extended subnetwork. An link capacity is infinite if there is nothing in the model constraining the capacity.

The capacities are determined in different ways:

- If an link does not exist in the allocation network, i.e. $(i,j) \notin E_S$ for certain $1 \le i,j\le n'$, then $(C_S)_{i,j} = 0$;
- The capacity of the link $e \in E_S$ is given by the smallest `max_flow_rate` of the nodes along the equivalent links in the subnetwork. If there are no nodes with a `max_flow_rate`, the link capacity is infinite. If the `max_flow_rate` is time-dependent, only the value at the starttime of the simulation is considered;
- If the link is a source, the capacity of the link is given by the flow rate of that source;

There are also capacities for special links:

- $C^{LD}_S \in \mathbb{R}^b_{\ge 0}$ where $b = \# B_S$ is the number of basins, for the flow supplied by basins based on level demand (this capacity is 0 for basins that have no level demand).
- $C^{FD}_S \in \mathbb{R}^c_{\ge 0}$ where $c = \# FD_S$ is the number of nodes with a flow demand, for the flow supplied by flow buffers at these nodes with a flow demand.
- $C^{UD}_S \in \mathbb{R}^f_{\ge 0}$ where $f = \# U_S$, for the flow supplied by the user demand outflow source whose capacity is given by return flows.

# The optimization problem

The optimization problem for a subnetwork consists of a quadratic objective function with associated linear constraints on a set of variables, all of which are introduced below.

## The optimization variables

There are several types of variable whose value has to be determined to solve the allocation problem:

- The flows $F \in \mathbb{R}_{\ge 0}^{n\times n}$ over the links in the allocation network;
- The flows $F^\text{basin out}_{i}, F^\text{basin in}_{i} \geq 0$ for all $i \in B_S$ supplied and consumed by the basins with a level demand respectively;
- The flows $F^\text{buffer out}_{i}, F^\text{buffer in}_{i} \ge 0$ for all $i \in FD_S \cup FF_S$ supplied and consumed by the flow buffers of nodes with a flow demand.

## The optimization objective

The goal of allocation is to get the flow to nodes with demands as close as possible to these demands. To achieve this, a sum of error terms is minimized.

$$
    \min E_{\text{user demand}} + E_{\text{level demand}} + E_{\text{flow demand}}
$$

The error between the flows and user demands is denoted by $E_{\text{user demand}}$, where
$$
    E_{\text{user demand}} = \sum_{(i,j)\in E_S\;:\; i\in U_S} d_j^p(t)\left(1 - \frac{F_{ij}}{d_j^p(t)}\right)^2
$$

:::{.callout-note}
When performing primary network allocation, the connections to subnetworks are also interpreted as UserDemand nodes with demands determined by subnetwork demand collection.
:::

This type of objective cares about the fraction of the demand allocated, and will lead to an equal fraction of all demands allocated when possible. For a discussion on this see [here](https://github.com/Deltares/Ribasim/pull/1366).

Likewise, the error of level demands from basins is the squared relative difference between flows consumed by basins and basin demands.
$$
    E_{\text{level demand}} = \sum_{i \in B_S} d_i^p(t)\left(1 - \frac{F_i^\text{basin in}}{d_i^p(t)}\right)^2
$$

Lastly, the error of the flow demands is given as below.
$$
    E_{\text{flow demand}} = \sum_{i \in FD_S} d_i^p(t)\left(1 -  \frac{F_i^\text{buffer in}}{d_i^p(t)}\right)^2
$$

## The optimization constraints

For convenience, we use the notation

\begin{align}
    V^{\text{out}}_S(i) = \left\{j \in V : (i,j) \in E_S\right\} \\
    V^{\text{in}}_S(j) = \left\{i \in V : (i,j) \in E_S\right\}
\end{align}

for the set of in-neighbors and out-neighbors of a node in the network respectively.

- Flow conservation: For all nodes $k$ that are not a source or a sink (i.e. `FlowBoundary`, `LevelBoundary`, `UserDemand`) we have a flow conservation constraint:
$$
    \sum F_{\text{out special}} + \sum_{j \in V^{\text{out}}_S(k)} F_{kj} = \sum F_{\text{in special}} + \sum_{i \in V^{\text{in}}_S(k)} F_{ik}, \quad \forall k \in B_S.
$$  {#eq-flowconservationconstraintbasin}

In here, we have the following special flows:

- If $k$ is a basin with a flow demand, there is a special outflow $F^{\text{basin in}}_k$ and a special inflow $F^{\text{basin out}}_k$;
- If the node has a buffer (see [here](#the-optimization-variables)) there is a special outflow $F^{\text{buffer in}}_k$ and a special inflow $F^{\text{buffer out}}_k$.

:::{.callout-note}
In the above, the placement of the basin and buffer flows might seem counter-intuitive. Think of the storage or buffer as a separate node connected to the node with the demand.
:::

- Capacity: the flows over the links are bounded by the link capacity:
$$
    F_{ij} \le \left(C_S\right)_{ij}, \quad \forall(i,j) \in E_S.
$$ {#eq-capacityconstraint}
By the definition of $C_S$ this also includes the source flows. The same holds for the basin outflows:

$$
    F^{\text{basin out}}_{i} \le F^{\text{basin out}}_{\max, i}, \quad \forall i \in B_S.
$$


There are several things to note about the source constraints:
- The sources are not all used at once. There is an optimization for each source in a subnetwork, where only one source has nonzero capacity.
- When performing subnetwork demand collection, these capacities are set to $\infty$ for links which connect the primary network to a subnetwork.

Similar constraints hold for the flow out of basins, flow demand buffers and user demand outflow sources:
$$
F^\text{basin out}_{i} \le (C^{FD}_S)_i, \quad \forall i \in B_S,
$$

$$
F^\text{buffer out}_{i} \le (C^{FD}_S)_i, \quad \forall i \in FD_S,
$$

$$
F_{ij} \le (C^{UD}_S)_i, \quad \forall i \in U_S, \quad V_S^{\text{out}}(i) = \{j\}.
$$
Here we use that each UserDemand node in the allocation network has a unique  outflow link. The user outflow source capacities are increased after each optimization solve by the return fraction:
$$
    r_i(t) \cdot F_{ki}, \quad V_S^{\text{in}}(i) = \{k\}.
$$

- Flow sign: Furthermore there are the non-negativity constraints for the flows and allocations, see [The optimization variables](/concept/allocation.qmd#the-optimization-variables).
``` -->
