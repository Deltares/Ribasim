---
title: "Allocation"
---
# Overview of allocation implementation {#sec-allocation-overview}
In this document the allocation workflow is explained. Below is an overview of it.
```{mermaid}
flowchart TD
    subgraph update_allocation
        direction TB
        G[update mean physical flows for allocation input]-->E[collect demand]
        E-->F[allocate]
    end
    style update_allocation fill:#9ff
    C(Begin)-->A[Initialization allocation]
    A--> update_allocation --> H[\end of time?\]
    H--> |No| update_allocation
    H --> |Yes| D(End)
```

If allocation is used in a model, [Allocation structs](#sec-allocation-struct) are created.
The allocation struct stores the data that is needed for the calculations and stores also the results of the calculation.
In allocation, optimization is an essential part.
`JuMP.jl` is used to model and solve the optimization problems that are defined by allocation.
The [`AllocationModel` struct](#sec-allocation-model-struct) is used for constructing the JuMP model.
When an instance of `AllocationModel` is created, a JuMP optimization model is defined and initialized in the instance.
More details on how allocation interacts with `JuMP.jl` is explained [here](#sec-jump-problem).

After initialization, as the simulation starts, the allocation problem is solved and updated after every allocation timestep (which is specified in the TOML).
With every allocation timestep a new optimization problem is formulated and solved, using the latest available data from the physical layer model and demands of the demand nodes.

The update of allocation (`update_allocation!`) is repeating and divided into three parts:

- Updating the mean flows. The mean flow data is used for output and to determine the capacity of sources in the allocation model.
- ["Collect demand"](/concept/allocation.qmd#sec-high-level-algorithm). This step initializes and solves the optimization problems that collects the demand from the subnetworks.
- ["Allocate"](/concept/allocation.qmd#sec-high-level-algorithm). This step solves the optimization problems that allocates the demand. For the primary network this step allocates to the subnetworks and demand nodes that are in the primary network. For the subnetwork this step allocates to the demand nodes.

The steps "collect demand" and "allocate" correspond to the function `collect_demand!` and `allocate_demands!` in the code.

The iteration stops when it reaches the end time of the simulation.

## The `Allocation` struct {#sec-allocation-struct}

The `Allocation` struct stores necessary data and calculation results.

## The `AllocationModel` struct {#sec-allocation-model-struct}

The `AllocationModel` struct has all the data that is needed for the JuMP optimization problem.

## JuMP problem interaction {#sec-jump-problem}
When working with optimization problems using JuMP, there are three fundamental components that need to be defined:

- Optimization variables: These are the [variables](https://jump.dev/JuMP.jl/stable/api/JuMP/#@constraints) that are optimized in the allocation problem formulation.
They are defined using the [`@variable`](https://jump.dev/JuMP.jl/stable/api/JuMP/#@variables) macro.
For example, to specify the flow rates in all the links in the allocation network as variables:

```julia
problem[:F] = JuMP.@variable(problem, F[link = links] >= 0.0)
```

More details about setting up variables in allocation can be found in the section [below](#sec-optimization-problem).

- Constraints: These are the constraints that the optimization variables must satisfy.
They are defined using the [`@constraint`](https://jump.dev/JuMP.jl/stable/api/JuMP/#@constraint) macro.
The definition of the link capacity constraints is shown in section [below](#sec-constraints-and-capacities).
`add_constraints_*` functions are used to [add constraints](#sec-initial-constraints) to the optimization problem.
The [initial value of the constraints](#sec-constraints-and-capacities) is set in the function `set_initial_values_*`.
During the iteration, the constraints are updated based on the current state of the allocation network.
When [looping over priorities](#updating-capacities), the constraints are updated by the function `adjust_*`.

- Objective function: This is the function that sets the objective of the optimization problem.
It is defined using the [`@objective`](https://jump.dev/JuMP.jl/stable/api/JuMP/#@objective) macro.

The functions `JuMP.normalized_rhs` and `JuMP.set_normalized_rhs` are used to read and write the constant right hand side of constraints respectively.

For example, to update the capacity of one of the links, `JuMP.normalized_rhs` moves all the constants to the right-hand sides and all variables to the left-hand side and `JuMP.set_normalized_rhs` sets the new right-hand-side value.
```julia
JuMP.set_normalized_rhs(
    constraints_capacity[link_id],
    JuMP.normalized_rhs(constraints_capacity[link_id]) - JuMP.value(F[link_id]),
)
```

Some JuMP data structures are used to store intermediate or result data. For more information, see [JuMP API](https://jump.dev/JuMP.jl/stable/api/JuMP/).

# Initialization
Initialization of the allocation data structures happens in `allocation_init.jl`. Below the steps of allocation problem initialization are explained.

For each subnetwork, an allocation problem is formulated, which is stored in the `allocation_models` field mentioned above.

## Data processing
### Deriving link capacities
Link capacities are important constraints in the optimization problem. They set the limit for the flows between the nodes. Therefore, the capacities of all the flow links in the subnetworks are obtained. The capacity of an link is given by the smallest `max_flow_rate` of the nodes connected to the links if these nodes have such a value. The capacities are stored in a `SparseArray` object from `JuMP.jl` called `capacities`, indexed by a tuple of node IDs.

The function `get_capacity` obtains the capacities of the links within a subnetwork given a subnetwork ID and the Ribasim model parameters `p`, if the sources of the subnetwork are valid (checked in function `valid_sources`).

### Handling the connection between the primary network and subnetworks
The function `find_subnetwork_connetions` finds the links that connected the primary network to a subnetwork. `subnetwork_demands` and `subnetwork_allocateds` will be created, which stores demands and allocated values for subnetworks as a whole.
`primary_network_connections` is a dictionary of links that connect a subnetwork with the primary network.

## The optimization problem {#sec-optimization-problem}
### Setting up the optimization variables
There are three types of variables in the optimization problems:

- flows between the links in the allocation model
- flows in and out of a basin with a level demand
- flows in and out of nodes that have a buffer, which are nodes that have a flow demand

The function `add_variables_flow!` is used to add the variable of flows between the links. The variables are obtained from the capacity array.
And variables named by `F($startnode, $endnode)` are created.

```julia
links = keys(capacity.data)
problem[:F] = JuMP.@variable(problem, F[link = links] >= 0.0)
```

In the function `add_variables_basin`, variables that represent flows of those basins that are connected with level demand are defined.
Part of the function is shown in the code block below.
A variable is named `F_basin_in` if the corresponding basin is supplied by a level demand and `F_basin_out` if consumed by a level demand.

```julia
# Get the node IDs from the subnetwork for basins that have a level demand
node_ids_basin = [
    node_id for
    node_id in graph[].node_ids[subnetwork_id] if graph[node_id].type == :basin &&
    has_external_flow_demand(graph, node_id, :level_demand)[1]
]
problem[:F_basin_in] =
    JuMP.@variable(problem, F_basin_in[node_id = node_ids_basin,] >= 0.0)
problem[:F_basin_out] =
    JuMP.@variable(problem, F_basin_out[node_id = node_ids_basin,] >= 0.0)
```

The last set of optimization variables is the flow links in and out of the buffer of nodes with a flow demand. It is defined in a similar way to the second set of variables.

### Setting up initial optimization constraints {#sec-initial-constraints}
All the variables are greater and equal to 0. This is set when the variables are added to the optimization problem.

Other constraints are `capacity`, `source_user`, `source`, `flow_conservation`, `fractional_flow`, `basin_outflow`, `flow_buffer_outflow` and `flow_demand_outflow`.

For each set of constraints, a function named `add_constrains_[constraints name]!` exists.

Take `add_constraints_user_source` as an example, the nodes that are relevant for the constraints are added to the optimization problem by calling JuMP.\@constraint.

```julia
node_ids_user = [node_id for node_id in node_ids if node_id.type == NodeType.UserDemand]

problem[:source_user] = JuMP.@constraint(
    problem,
    [node_id = node_ids_user],
    F[(node_id, outflow_id(graph, node_id))] <= 0.0,
    base_name = "source_user"
)
```

# Optimization
Initialization of the data structure is in `allocation_init.jl`, and updating, running and reading the results is in `allocation_optim.jl`.

## Preparing the optimization problem
### Setting up the objective function
The optimization objective is the sum of three quadratic error terms.
The quadratic terms are defined with the `add_objective_term` function.

Function `set_objective_priority` sets the objective function based on the primary network for a given priority with the following steps:

- First, it treats the subnetworks as user demand nodes and adds the quadratic terms of the primary network.
- Then it loops over all the links in allocation.
- Based on the type of the node that the link is pointing to (user demand or flow demand), it adds the corresponding quadratic terms.
- Finally, it does the same to the links that start from a level demand node.

### Setting the constraints and capacities
In the function `set_initial_values`, the following capacities and demands are initialized:

- Source capacities come from the physical layer
- Link capacities derived from the maximum capacities between the connected nodes
- Basin capacities come from the disk of water above the max level set by a level demand node
- Buffer capacities start at 0
- User demands fractional return flow starts at 0
- Demands either come from the Ribasim model or are set via the BMI

As shown below, these functions set the capacities to the corresponding initial values.

```julia
set_initial_capacities_source!(allocation_model, p)
set_initial_capacities_link!(allocation_model, p)
set_initial_capacities_basin!(allocation_model, p, u, t)
set_initial_capacities_buffer!(allocation_model)
set_initial_capacities_returnflow!(allocation_model)

set_initial_demands_user!(allocation_model, p, t)
set_initial_demands_level!(allocation_model, u, p, t)
set_initial_demands_flow!(allocation_model, p, t)
```

These capacities determine the constraints of the optimization problem.
Take `set_initial_capacities_source` as an example, the right-hand-side values of the `source_constraints` are set to the `source_capacity`.

```julia
for link_metadata in values(graph.edge_data)
    (; link) = link_metadata
    if graph[link...].subnetwork_id_source == subnetwork_id
        # If it is a source link for this allocation problem
        if link ∉ main_network_source_links
            # Reset the source to the averaged flow over the last allocation period
            source_capacity = mean_input_flows[link][]
            JuMP.set_normalized_rhs(
                source_constraints[link],
                # It is assumed that the allocation procedure does not have to be differentiated.
                source_capacity,
            )
        end
    end
end
```

Apart from the `set_initial_*` function above, capacities of `inlet` are the allocated capacities from the primary network to the subnetworks.
Source constraints will be adapted based on the optimization type.
This function is called separately and thus not part of the `set_initial_values`.

## Looping over priorities
### Updating capacities {#sec-updating-capacities}
While optimizing a given priority, the function `set_capacities_flow_demand_outflow` updates the constraints `flow_demand_outflow`.
If the current priority is the same as the priority of the flow demand, constraints will be infinite, otherwise 0.
At priorities where there is no flow demand, flow can go freely trough the node. When there is flow demand, flow is directed into the buffer. This is to make sure that flow can go to the node with the flow demand, even though the flow might have nowhere to go after that node.

The optimization objective function is updated based on the new demands and the given priority.

If a solution is found by the solver, the allocation result will be updated. And it will be [saved](/dev/allocation.qmd#output-data), so the [physical layer](/dev/allocation.qmd#communicating-to-the-physical-layer) can make use of it.

Lastly, capacities and demands are updated, as shown below:

```julia
adjust_capacities_source!(allocation_model)
adjust_capacities_link!(allocation_model)
adjust_capacities_basin!(allocation_model)
adjust_capacities_buffer!(allocation_model)
adjust_capacities_returnflow!(allocation_model, p)

for parameter in propertynames(p)
    demand_node = getfield(p, parameter)
    if demand_node isa AbstractDemandNode
        adjust_demands!(allocation_model, p, priority_idx, demand_node)
    end
end
```

## Output data
The function `save_demands_and_allocations` saves the demand and the allocated value per demand node. And the function `save_allocation_flows` saves the optimized flows over the links in the subnetwork.
These values are saved in the `record_demand` and `record_flow` fields of the `Allocation` struct and only written to the output file at the end of the simulation.

## Communicating to the physical layer
The function `assign_allocations` updates the subnetwork demand if the optimization task is `collect_demands`.
It assigns the allocated amount to the `UserDemand` nodes with the result of the optimization if the optimization task is `allocate`.
Afterwards, it writes the resulting flow to the `Allocation` object.

### `UserDemand` abstraction
When allocation is active, the amount each `UserDemand` node is allowed to extract from its upstream basin is determined by the allocation algorithm.
See [here](/reference/node/user-demand.qmd) for more details on how allocation updates the `UserDemand` node.

### Controlling pumps/weirs based on allocation results
N/A and TODO in [this task](https://github.com/Deltares/Ribasim/issues/714).
