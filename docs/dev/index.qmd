---
title: "Contributing"
---

Ribasim welcomes contributions.

There is developer documentation for the [Julia core](/dev/core.qmd), the [Basic Model Interface (BMI)](/dev/bmi.qmd), [Python tooling](/dev/python.qmd), and the [QGIS plugin](/dev/qgis.qmd).
A guide on how to add a new node type to both is written in [adding node types](/dev/addnode.qmd).
[Release process](/dev/release.qmd) describes the steps to follow when creating a new Ribasim release.

# Setting up the developer environment

## Clone Ribasim

In order to have the Ribasim repository locally available, you can clone it with Git.
Git can be installed from [git-scm.com](https://git-scm.com/downloads).
Once installed, run the following command at a directory of your choice:

In order to have the Ribasim repository locally available, run the following command at a directory of your choice:

```sh
git clone https://github.com/Deltares/Ribasim.git
```

To continue with the following steps, make the root of the repository your working directory by running

```sh
cd Ribasim
```

## Setting up Pixi

First, set up Pixi as described on their getting started [page](https://prefix.dev/docs/pixi/overview).

We require at least Pixi version v0.48.1, but generally recommend the latest release.
Check the version with `pixi --version`, update with `pixi self-update`.

Windows users should [enable Developer Mode](https://learn.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development#activate-developer-mode), because the install task creates symlinks for the QGIS plugin.

Then set up the environment by running the following command. It will take a while.
You can interrupt the task if you don't want to precompile the Julia dependencies at this moment, because that is the last task.
Check out the `pixi.toml` file to see the tasks that are part of this, you can also run them individually.

```sh
pixi run install
```

The install task automatically installs all required Python and Julia packages for development.
Our Pixi environment also provides Juliaup, QGIS and the Rust compiler.
These will not conflict with any pre-installed applications, as long as you have the pixi environment enabled.
You can do this in a terminal by calling `pixi shell`, or starting programs with `pixi run julia`, or `pixi run qgis`.
The first time you open the Ribasim repo in Visual Studio Code you need to tell it where it can find the Pixi environment.
Open the command box with {{< kbd Ctrl+Shift+P >}} ({{< kbd Cmd+Shift+P >}} on macOS) and run `Python: Select Interpreter`.
Select `('default': Pixi)` in the `/.pixi` folder.
Unless the setting `python.terminal.activateEnvironment` is disabled, it will already activate the environment in your terminal.

If you encounter issues related to Pixi dependencies, it might help to clean your Pixi environment with `pixi clean`, followed by `pixi run install`.
