---
title: "Julia core development"
---

# Julia core overview

The computational core is one of the components of Ribasim as illustrated in the [component overview](/install.qmd#sec-components).

The computational process can be divided into three phases:

- Model initialization
- Running the simulation loop
- Writing the output files

A more detailed sequence diagram of the simulation loop is available at the [core](/concept/core.qmd#sec-simulationloop) home page.

# Set up the developer environment

## Install optional Julia libraries

Start the Julia [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop) by executing `pixi run julia` in your terminal.
Within the REPL type `]` to enter the Pkg REPL.
For more information on how to use `Pkg`, see the [Getting Started](https://pkgdocs.julialang.org/v1/getting-started/) page in its documentation.
There you can add `Revise` to your global environment.

```julia
pkg> add Revise
```

## Setup Revise.jl

Revise.jl is a library that allows you to modify code and use the changes without restarting Julia.
You can let it start automatically by following these [instructions](https://timholy.github.io/Revise.jl/stable/config/#Using-Revise-by-default-1).

## Install Visual Studio Code (optional)

There is a section on editors and IDEs for Julia on <https://julialang.org/>, scroll down to see it.
We use and recommend Microsoft's free editor [Visual Studio Code](https://code.visualstudio.com/).
When combined with the [Julia extension](https://www.julia-vscode.org/) it provides a powerful and interactive development experience.

# Developing on Ribasim

## Running tests {#sec-test}

You will want to run the testsuite on a regular basis to check if your changes had unexpected side effects.
It is also a good way to find out if your development environment is set up correctly.

Before the tests can run, you need to [prepare model input](/dev/python.qmd#prepare-model-input).

With the root of the repository as your working directory you can start the REPL with activated `root` environment by running the following:

```bash
julia --project
```

While not technically required, it is advised to import Ribasim first to catch installation issues early on.

```julia
julia> using Ribasim
```

Then open the Pkg REPL by typing `]` and execute:

```julia
pkg> test Ribasim
```

In order to debug tests, you can run individual test items from Visual Studio Code.
Click the green play icon in front of a test item, as show in the image below.
The first run will be slow.

![](https://github.com/Deltares/Ribasim/assets/4471859/58077f71-11d0-4c45-8d95-4eba8c0a0139)

## Render documentation

Example models are created and simulated as part of the rendering of the documentation.

In order to preview documentation you can run the following command from the `docs/` folder.
Afterwards, a browser tab will open with the rendered documentation, updating it as you
make changes.

```bash
pixi run quarto-preview
```

The documentation also includes [Jupyter notebooks](https://jupyter.org/).
Note that they are stored in the repository without any output, and this should stay
this way to keep the repository small. The documentation rendering process adds the output
by running the notebooks.

:::{.callout-tip}
The Jupyter VS Code [extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) allows you to run Jupyter notebooks directly in VS Code.
:::

## Run Ribasim simulations

Assuming your working directory is the root of the repository,
you can activate this project by entering the Pkg mode of the REPL with `]` and execute:

```julia
pkg> activate .
pkg> instantiate
```

Press backspace to go back to the Julia REPL.
There you can run a model with:
```julia
julia> Ribasim.run("path/to/model/ribasim.toml")
```

:::{.callout-tip}
The Julia VS Code extension allows you to [execute code cells in REPL](https://www.julia-vscode.org/docs/stable/userguide/runningcode/#Running-code-in-the-Julia-REPL).
This is a very convenient way of executing only parts of your source file.
:::

## Build Ribasim

The Ribasim core can be built into an executable with a command line interface (CLI) and a shared library, libribasim.
These products will run without a Julia installation.
To create both these products at once, run:

```
pixi run build
```

To verify that the build was successful, you can run both these commands.

```
pixi run test-ribasim-api
pixi run test-ribasim-cli
```

During development these steps are normally done [on TeamCity](/dev/ci.qmd#TeamCity),
though in some cases it can be more convenient to build locally.
